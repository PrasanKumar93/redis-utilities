#-------------------builderFrontend -------------------------
FROM node:18-alpine AS builderFrontend

WORKDIR /app

# Copy the package.json and install dependencies 
COPY package*.json ./frontend/
RUN cd ./frontend && npm install

# Copy the rest of the code
COPY . ./frontend

# Build the code
RUN cd ./frontend && npm run build 

# Replace the PORT env variable in the frontend server.js file generated by standalone build
RUN sed -i 's/process\.env\.PORT/process.env.PORT_FRONTEND/g' /app/frontend/.next/standalone/server.js

#-------------------Final stage-------------------------
FROM node:18-alpine

WORKDIR /app

# Copy required files from the build stage
COPY --from=builderFrontend /app/frontend/.next/standalone ./frontend/
COPY --from=builderFrontend /app/frontend/.next/static ./frontend/.next/static
COPY --from=builderFrontend /app/frontend/public ./frontend/public

# Install only production dependencies
# RUN cd ./frontend && npm ci --only=production (standalone build is already production ready and has all the dependencies)

# Set environment variables
ENV IMPORT_TOOL_FROM_DOCKER="Y"

# Start app
# CMD is runtime instruction, so can use ENV variable
CMD ["sh", "-c", "PORT_FRONTEND=${PORT_FRONTEND:-3000} && cd /app/frontend && node server.js"]
# :- operator ensures if PORT_FRONTEND env variable is not set, it will default to 3000.